name: .NET Build, Publish and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Get short SHA
      run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
      
    - name: Print short SHA
      run: echo "Short SHA is ${{ env.SHORT_SHA }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies
      run: dotnet restore "./WLEDAnimated.API/WLEDAnimated.API.csproj"

    - name: Build
      run: dotnet build "./WLEDAnimated.API/WLEDAnimated.API.csproj" -c Release --no-restore /p:Version=1.0.$SHORT_SHA

      # Repeat this step for each platform you want to publish for
    - name: Publish for Windows
      run: dotnet publish "./WLEDAnimated.API/WLEDAnimated.API.csproj" -c Release -o publish/win-x64 --no-restore -r win-x64 --self-contained true /p:Version=1.0.$SHORT_SHA

    - name: Publish for Linux
      run: dotnet publish "./WLEDAnimated.API/WLEDAnimated.API.csproj" -c Release -o publish/linux-x64 --no-restore -r linux-x64 --self-contained true /p:Version=1.0.$SHORT_SHA

    - name: Publish for macOS
      run: dotnet publish "./WLEDAnimated.API/WLEDAnimated.API.csproj" -c Release -o publish/osx-x64 --no-restore -r osx-x64 --self-contained true /p:Version=1.0.$SHORT_SHA

    - name: Zip the publish directory for Windows
      run: zip -r publish-win-${{ github.sha }}.zip publish/win-x64/

    - name: Zip the publish directory for Linux
      run: zip -r publish-linux-${{ github.sha }}.zip publish/linux-x64/

    - name: Zip the publish directory for macOS
      run: zip -r publish-osx-${{ github.sha }}.zip publish/osx-x64/

    # Repeat this step for each zipped platform
    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows-app
        path: publish-win-${{ github.sha }}.zip

    - name: Upload Linux build artifact
      uses: actions/upload-artifact@v2
      with:
        name: linux-app
        path: publish-linux-${{ github.sha }}.zip

    - name: Upload macOS build artifact
      uses: actions/upload-artifact@v2
      with:
        name: macos-app
        path: publish-osx-${{ github.sha }}.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: alpha-${{ env.SHORT_SHA }}
        release_name: Release - alpha-${{ env.SHORT_SHA }}
        draft: false
        prerelease: false
        body: "Release of commit ${{ github.sha }}"

    # Repeat this step for each platform
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish-win-${{ github.sha }}.zip
        asset_name: publish-win-${{ github.sha }}.zip
        asset_content_type: application/zip

    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish-linux-${{ github.sha }}.zip
        asset_name: publish-linux-${{ github.sha }}.zip
        asset_content_type: application/zip

    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish-osx-${{ github.sha }}.zip
        asset_name: publish-osx-${{ github.sha }}.zip
        asset_content_type: application/zip
        